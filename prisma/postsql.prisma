datasource db {
  provider = "postgresql"
  url      = env("POSTGRE_SQL_DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}




model users {
  user_id             Int              @id @default(autoincrement())
  username            String           @unique @db.VarChar(50)
  email               String           @unique @db.VarChar(100)
  bio                 String?          @db.Text
  encrypted_password  String           @db.VarChar(255)
  profile_picture_url String?          @db.VarChar(255)
  phone_number        String?          @db.VarChar(20)
  email_verification_token String?     @db.VarChar(255)
  points              Int              @default(2000)
  level               Int              @default(1)
  is_email_verified   Boolean          @default(false)
  role                role             @default(USER)
  account_status      accountStatus    @default(INACTIVE)
  sign_up_ip          String?          @db.VarChar(45)
  login_count         Int              @default(0) // 로그인 횟수 필드 추가
  created_at          DateTime         @default(now()) @db.Timestamp
  last_login_at       DateTime?
  updated_at          DateTime?        @db.Timestamp
  deleted_at          DateTime?        @db.Timestamp
  social_login        socialLogin[]
  point               point[]
  post                post[]
  comment             comment[]
  comment_like        commentLike[]
  like                like[]
  admin_action        adminAction[]
  auth_code           authCode[]
  following           follow[] @relation("FollowingRelation")
  followers           follow[] @relation("FollowerRelation")
  reportReported      report[] @relation("ReportedUser")
  reportReporter      report[] @relation("Reporter")
  reportResolved      report[] @relation("ResolvedBy")
  userBlockBlocker    userBlock[] @relation("Blocker")
  userBlockBlocked    userBlock[] @relation("Blocked")
  adminBlockAdmin     adminBlock[] @relation("Admin")
  adminBlockBlocked   adminBlock[] @relation("AdminBlockedUser")
}


model levelthreshold {
  level                Int     @id
  min_posts            Int
  min_comments         Int
  min_likes            Int
  min_logins           Int     @default(0) // 방문 횟수 기준 필드 추가
  created_at           DateTime @default(now()) @db.Timestamp
  updated_at           DateTime? @db.Timestamp
  deleted_at           DateTime? @db.Timestamp
}


model AdBanner {
  id                 Int      @id @default(autoincrement())
  position           Int
  company_name       String
  description        String
  contract_period    Int
  contract_date      DateTime
  start_date         DateTime
  end_date           DateTime
  image_url          String
  view_count         Int      @default(0)
  status             AdBannerStatus @default(INACTIVE) // 상태 필드
  created_at           DateTime @default(now()) @db.Timestamp
  updated_at           DateTime? @db.Timestamp
  deleted_at           DateTime? @db.Timestamp
}

enum AdBannerStatus {
  ACTIVE
  INACTIVE
}



model socialLogin {
  social_login_id  Int        @id @default(autoincrement())
  user_id          Int
  provider         provider
  provider_user_id String     @db.VarChar(255)
  created_at       DateTime   @default(now()) @db.Timestamp
  updated_at       DateTime?  @db.Timestamp
  deleted_at       DateTime?  @db.Timestamp
  user             users      @relation(fields: [user_id], references: [user_id])
}

model follow {
  follow_id        Int      @id @default(autoincrement())
  follower_id      Int
  following_id     Int
  created_at       DateTime @default(now()) @db.Timestamp
  updated_at       DateTime? @db.Timestamp
  deleted_at       DateTime? @db.Timestamp
  follower         users    @relation("FollowingRelation", fields: [follower_id], references: [user_id])
  following        users    @relation("FollowerRelation", fields: [following_id], references: [user_id])
}

model authCode {
  id          Int         @id @default(autoincrement())
  user_id     Int         @unique
  code        String      @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  keojak_code String      @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expired_at  DateTime
  createdAt   DateTime    @default(now())
  user        users       @relation(fields: [user_id], references: [user_id])
}

model point {
  point_id      Int       @id @default(autoincrement())
  user_id       Int
  points_change Int
  change_reason String?   @db.VarChar(255)
  change_date   DateTime  @default(now()) @db.Timestamp
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  deleted_at    DateTime? @db.Timestamp
  user          users     @relation(fields: [user_id], references: [user_id])
}

model topic {
  topic_id    Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp
  updated_at  DateTime? @db.Timestamp
  deleted_at  DateTime? @db.Timestamp
  category    category[]
}

model category {
  category_id    Int       @id @default(autoincrement())
  topic_id       Int
  category_name  String    @db.VarChar(100)
  created_at     DateTime  @default(now()) @db.Timestamp
  updated_at     DateTime? @db.Timestamp
  deleted_at     DateTime? @db.Timestamp
  topic          topic     @relation(fields: [topic_id], references: [topic_id])
  post           post[]
}

model media {
  media_id    Int       @id @default(autoincrement())
  post_id     Int?
  comment_id  Int?
  media_type  mediaType
  media_url   String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp
  updated_at  DateTime? @db.Timestamp
  deleted_at  DateTime? @db.Timestamp
  post        post?     @relation(fields: [post_id], references: [post_id])
  comment     comment?  @relation(fields: [comment_id], references: [comment_id])
}

model comment {
  comment_id       Int       @id @default(autoincrement())
  post_id          Int
  user_id          Int
  content          String    @db.Text
  parent_comment_id Int?
  status           commentStatus @default(PUBLIC)
  likes            Int        @default(0)
  created_at       DateTime   @default(now()) @db.Timestamp
  updated_at       DateTime?  @db.Timestamp
  deleted_at       DateTime?  @db.Timestamp
  isSelected       Boolean?   @default(false) // 답변으로 선택 여부
  post             post       @relation(fields: [post_id], references: [post_id])
  user             users      @relation(fields: [user_id], references: [user_id])
  parentComment    comment?   @relation("CommentToComment", fields: [parent_comment_id], references: [comment_id])
  childComments    comment[]  @relation("CommentToComment")
  commentLike      commentLike[]
  media            media[]    
}

model commentLike {
  comment_like_id Int       @id @default(autoincrement())
  comment_id      Int
  user_id         Int
  liked_at        DateTime  @default(now()) @db.Timestamp
  created_at      DateTime  @default(now()) @db.Timestamp
  updated_at      DateTime? @db.Timestamp
  deleted_at      DateTime? @db.Timestamp
  comment         comment   @relation(fields: [comment_id], references: [comment_id])
  user            users     @relation(fields: [user_id], references: [user_id])
}

model post {
  post_id      Int       @id @default(autoincrement())
  user_id      Int
  category_id  Int
  type         postType
  status       postStatus @default(PUBLIC)
  views        Int        @default(0)
  likes        Int        @default(0)
  comments     Int        @default(0)
  created_at   DateTime   @default(now()) @db.Timestamp
  updated_at   DateTime?  @db.Timestamp
  deleted_at   DateTime?  @db.Timestamp
  user         users      @relation(fields: [user_id], references: [user_id])
  category     category   @relation(fields: [category_id], references: [category_id])
  media        media[]
  comment      comment[]
  like         like[]
  postTag      postTag[]
  postView     postView[]
  post_general post_general?
  post_column  post_column?
  post_question post_question?
}

model post_general {
  general_id    Int       @id @default(autoincrement())
  post_id       Int       @unique
  title         String    @db.VarChar(255)
  content       String    @db.Text
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  deleted_at    DateTime? @db.Timestamp
  post          post      @relation(fields: [post_id], references: [post_id])
}

model post_column {
  column_id     Int       @id @default(autoincrement())
  post_id       Int       @unique
  title         String    @db.VarChar(255)
  content       String    @db.Text
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  deleted_at    DateTime? @db.Timestamp
  post          post      @relation(fields: [post_id], references: [post_id])
}

model post_question {
  question_id   Int       @id @default(autoincrement())
  post_id       Int       @unique
  title         String    @db.VarChar(255)
  content       String    @db.Text
  points        Int       @default(0)
  isAnswered    Boolean   @default(false)  // 새로운 필드 추가
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  deleted_at    DateTime? @db.Timestamp
  post          post      @relation(fields: [post_id], references: [post_id])
}

model like {
  like_id     Int       @id @default(autoincrement())
  post_id     Int
  user_id     Int
  created_at  DateTime  @default(now()) @db.Timestamp
  updated_at  DateTime? @db.Timestamp
  deleted_at  DateTime? @db.Timestamp
  post        post      @relation(fields: [post_id], references: [post_id])
  user        users     @relation(fields: [user_id], references: [user_id])
}

model tag {
  tag_id        Int       @id @default(autoincrement())
  tag_name      String    @unique @db.VarChar(100)
  is_admin_tag  Boolean   @default(false)
  usage_count   Int       @default(0)
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  deleted_at    DateTime? @db.Timestamp
  postTag       postTag[]
}

model postTag {
  post_tag_id  Int       @id @default(autoincrement())
  post_id      Int
  tag_id       Int
  created_at   DateTime  @default(now()) @db.Timestamp
  updated_at   DateTime? @db.Timestamp
  deleted_at   DateTime? @db.Timestamp
  post         post      @relation(fields: [post_id], references: [post_id])
  tag          tag       @relation(fields: [tag_id], references: [tag_id])
}

model postView {
  post_view_id  Int       @id @default(autoincrement())
  post_id       Int
  ip_address    String    @db.VarChar(45)
  viewed_at     DateTime  @default(now()) @db.Timestamp
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  deleted_at    DateTime? @db.Timestamp
  post          post      @relation(fields: [post_id], references: [post_id])
}

model adminAction {
  action_id       Int       @id @default(autoincrement())
  admin_user_id   Int
  target_type     targetType
  target_id       Int
  action_type     actionType
  reason          String?   @db.Text
  action_timestamp DateTime @default(now()) @db.Timestamp
  adminUser       users     @relation(fields: [admin_user_id], references: [user_id])
}

enum reportTargetType {
  POST
  COMMENT
  USER
}

model report {
  report_id         Int               @id @default(autoincrement())
  target_type       reportTargetType  // 신고 대상의 유형 (POST, COMMENT, USER)
  target_id         Int               // 신고 대상의 ID (게시글, 댓글, 사용자)
  reported_user_id  Int
  reported_user     users             @relation("ReportedUser", fields: [reported_user_id], references: [user_id])
  reporter_user_id  Int
  reporter_user     users             @relation("Reporter", fields: [reporter_user_id], references: [user_id])
  reason            String            @db.Text
  status            reportStatus      @default(PENDING)
  created_at        DateTime          @default(now()) @db.Timestamp
  updated_at        DateTime?         @db.Timestamp
  resolved_at       DateTime?         @db.Timestamp
  resolved_by_user_id Int?
  resolved_by       users?            @relation("ResolvedBy", fields: [resolved_by_user_id], references: [user_id])
}



model userBlock {
  block_id   Int       @id @default(autoincrement())
  blocker    users     @relation("Blocker", fields: [blocker_id], references: [user_id])
  blocker_id Int
  blocked    users     @relation("Blocked", fields: [blocked_id], references: [user_id])
  blocked_id Int
  created_at DateTime  @default(now()) @db.Timestamp
  deleted_at DateTime? @db.Timestamp  // Add this field for toggling block status
}



model adminBlock {
  admin_block_id Int       @id @default(autoincrement())
  admin          users     @relation("Admin", fields: [admin_id], references: [user_id])
  admin_id       Int
  blocked_user   users     @relation("AdminBlockedUser", fields: [blocked_user_id], references: [user_id])
  blocked_user_id Int
  reason         String    @db.Text
  created_at     DateTime  @default(now()) @db.Timestamp
  unblocked_at   DateTime?
  block_count    Int       @default(1)
  updated_at     DateTime  @updatedAt @db.Timestamp // Add this line for tracking updates
}


model PopularSearchRank {
  id            Int       @id @default(autoincrement())
  keyword       String    @db.VarChar(255) // 검색어
  current_rank  Int       // 현재 순위
  previous_rank Int?      // 이전 순위, 없으면 New 상태
  rank_change   RankChange // 순위 변화 상태 (up, down, new)
  rank_difference Int?     // 순위가 몇 위 변동했는지
  search_count  Int       @default(0) // 해당 검색어가 검색된 횟수
  check_time    DateTime  @default(now()) // 순위 체크한 시간
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
}

enum RankChange {
  UP
  DOWN
  NEW
  SAME
}


enum reportStatus {
  PENDING
  RESOLVED
  REJECTED
}


enum role {
  USER
  ADMIN
}

enum accountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum provider {
  GOOGLE
  NAVER
  KAKAO
}

enum postType {
  GENERAL
  COLUMN
  QUESTION
}

enum sortType {
  LATEST
  POPULAR
}

enum postStatus {
  PUBLIC
  DRAFT
  DELETED
}

enum mediaType {
  IMAGE
  VIDEO
}

enum commentStatus {
  PUBLIC
  DELETED
}

enum targetType {
  POST
  COMMENT
}

enum actionType {
  DELETE
}
