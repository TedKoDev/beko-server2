datasource db {
  provider = "postgresql"
  url      = env("POSTGRE_SQL_DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

model Users {
  user_id             Int              @id @default(autoincrement())
  username            String           @db.VarChar(50)
  email               String           @unique @db.VarChar(100)
  encrypted_password  String           @db.VarChar(255)
  profile_picture_url String?          @db.VarChar(255)
  phone_number        String?          @db.VarChar(20)
  email_verification_token String?     @db.VarChar(255)
  is_email_verified   Boolean          @default(false)
  role                Role             @default(USER)
  account_status      AccountStatus    @default(ACTIVE)
  sign_up_ip          String?          @db.VarChar(45)
  created_at          DateTime         @default(now()) @db.Timestamp
  last_login_at       DateTime?
  updated_at          DateTime?        @db.Timestamp
  deleted_at          DateTime?        @db.Timestamp
  SocialLogin         SocialLogin[]
  Point               Point[]
  Post                Post[]
  Comment             Comment[]
  CommentLike         CommentLike[]
  Like                Like[]
  AdminAction         AdminAction[]
  AuthCode            AuthCode[]
  Following           Follow[] @relation("FollowingRelation")
  Followers           Follow[] @relation("FollowerRelation")
}

model SocialLogin {
  social_login_id  Int        @id @default(autoincrement())
  user_id          Int
  provider         Provider
  provider_user_id String     @db.VarChar(255)
  created_at       DateTime   @default(now()) @db.Timestamp
  updated_at       DateTime?  @db.Timestamp
  deleted_at       DateTime?  @db.Timestamp
  User             Users      @relation(fields: [user_id], references: [user_id])
}

model Follow {
  follow_id        Int      @id @default(autoincrement())
  follower_id      Int
  following_id     Int
  created_at       DateTime @default(now()) @db.Timestamp
  updated_at       DateTime? @db.Timestamp
  deleted_at       DateTime? @db.Timestamp
  follower         Users    @relation("FollowingRelation", fields: [follower_id], references: [user_id])
  following        Users    @relation("FollowerRelation", fields: [following_id], references: [user_id])
}

model AuthCode {
  id          Int         @id @default(autoincrement())
  user_id     Int         @unique
  code        String      @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  keojak_code String      @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expired_at  DateTime
  createdAt   DateTime    @default(now())
  User        Users       @relation(fields: [user_id], references: [user_id])
}

model Point {
  point_id      Int       @id @default(autoincrement())
  user_id       Int
  points_change Int
  change_reason String?   @db.VarChar(255)
  change_date   DateTime  @default(now()) @db.Timestamp
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  deleted_at    DateTime? @db.Timestamp
  User          Users      @relation(fields: [user_id], references: [user_id])
}

model Topic {
  topic_id    Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp
  updated_at  DateTime? @db.Timestamp
  deleted_at  DateTime? @db.Timestamp
  Category    Category[]
}

model Category {
  category_id    Int       @id @default(autoincrement())
  topic_id       Int
  category_name  String    @db.VarChar(100)
  created_at     DateTime  @default(now()) @db.Timestamp
  updated_at     DateTime? @db.Timestamp
  deleted_at     DateTime? @db.Timestamp
  Topic          Topic     @relation(fields: [topic_id], references: [topic_id])
  Post           Post[]
}

model Media {
  media_id    Int       @id @default(autoincrement())
  post_id     Int?
  comment_id  Int?
  media_type  MediaType
  media_url   String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp
  updated_at  DateTime? @db.Timestamp
  deleted_at  DateTime? @db.Timestamp
  Post        Post?     @relation(fields: [post_id], references: [post_id])
  Comment     Comment?  @relation(fields: [comment_id], references: [comment_id])
}

model Comment {
  comment_id       Int       @id @default(autoincrement())
  post_id          Int
  user_id          Int
  content          String    @db.Text
  parent_comment_id Int?
  status           CommentStatus @default(PUBLIC)
  likes            Int        @default(0)
  created_at       DateTime   @default(now()) @db.Timestamp
  updated_at       DateTime?  @db.Timestamp
  deleted_at       DateTime?  @db.Timestamp
  Post             Post       @relation(fields: [post_id], references: [post_id])
  User             Users      @relation(fields: [user_id], references: [user_id])
  ParentComment    Comment?   @relation("CommentToComment", fields: [parent_comment_id], references: [comment_id])
  ChildComments    Comment[]  @relation("CommentToComment")
  CommentLike      CommentLike[]
  Media            Media[]    
}

model CommentLike {
  comment_like_id Int       @id @default(autoincrement())
  comment_id      Int
  user_id         Int
  liked_at        DateTime  @default(now()) @db.Timestamp
  created_at      DateTime  @default(now()) @db.Timestamp
  updated_at      DateTime? @db.Timestamp
  deleted_at      DateTime? @db.Timestamp
  Comment         Comment   @relation(fields: [comment_id], references: [comment_id])
  User            Users      @relation(fields: [user_id], references: [user_id])
}

model Post {
  post_id      Int       @id @default(autoincrement())
  user_id      Int
  category_id  Int
  type         PostType
  status       PostStatus @default(PUBLIC)
  views        Int        @default(0)
  likes        Int        @default(0)
  created_at   DateTime   @default(now()) @db.Timestamp
  updated_at   DateTime?  @db.Timestamp
  deleted_at   DateTime?  @db.Timestamp
  User         Users       @relation(fields: [user_id], references: [user_id])
  Category     Category   @relation(fields: [category_id], references: [category_id])
  Media        Media[]
  Comment      Comment[]
  Like         Like[]
  PostTag      PostTag[]
  PostView     PostView[]
  General      General?
  Column       Column?
  Question     Question?
}

model General {
  general_id    Int       @id @default(autoincrement())
  post_id       Int       @unique
  title         String    @db.VarChar(255)
  content       String    @db.Text
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  deleted_at    DateTime? @db.Timestamp
  Post          Post      @relation(fields: [post_id], references: [post_id])
}

model Column {
  column_id     Int       @id @default(autoincrement())
  post_id       Int       @unique
  title         String    @db.VarChar(255)
  content       String    @db.Text
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  deleted_at    DateTime? @db.Timestamp
  Post          Post      @relation(fields: [post_id], references: [post_id])
}

model Question {
  question_id   Int       @id @default(autoincrement())
  post_id       Int       @unique
  title         String    @db.VarChar(255)
  content       String    @db.Text
  points        Int       @default(0)
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  deleted_at    DateTime? @db.Timestamp
  Post          Post      @relation(fields: [post_id], references: [post_id])
}


model Like {
  like_id     Int       @id @default(autoincrement())
  post_id     Int
  user_id     Int
  created_at  DateTime  @default(now()) @db.Timestamp
  updated_at  DateTime? @db.Timestamp
  deleted_at  DateTime? @db.Timestamp
  Post        Post      @relation(fields: [post_id], references: [post_id])
  User        Users      @relation(fields: [user_id], references: [user_id])
}

model Tag {
  tag_id        Int       @id @default(autoincrement())
  tag_name      String    @unique @db.VarChar(100)
  is_admin_tag  Boolean   @default(false)
  usage_count   Int       @default(0)
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  deleted_at    DateTime? @db.Timestamp
  PostTag       PostTag[]
}

model PostTag {
  post_tag_id  Int       @id @default(autoincrement())
  post_id      Int
  tag_id       Int
  created_at   DateTime  @default(now()) @db.Timestamp
  updated_at   DateTime? @db.Timestamp
  deleted_at   DateTime? @db.Timestamp
  Post         Post      @relation(fields: [post_id], references: [post_id])
  Tag          Tag       @relation(fields: [tag_id], references: [tag_id])
}

model PostView {
  post_view_id  Int       @id @default(autoincrement())
  post_id       Int
  ip_address    String    @db.VarChar(45)
  viewed_at     DateTime  @default(now()) @db.Timestamp
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  deleted_at    DateTime? @db.Timestamp
  Post          Post      @relation(fields: [post_id], references: [post_id])
}

model AdminAction {
  action_id       Int       @id @default(autoincrement())
  admin_user_id   Int
  target_type     TargetType
  target_id       Int
  action_type     ActionType
  reason          String?   @db.Text
  action_timestamp DateTime @default(now()) @db.Timestamp
  AdminUser       Users      @relation(fields: [admin_user_id], references: [user_id])
}

enum Role {
  USER
  ADMIN
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Provider {
  GOOGLE
  FACEBOOK
  TWITTER
  LINKEDIN
  GITHUB
}

enum PostType {
  GENERAL
  EDITOR
}

enum PostStatus {
  PUBLIC
  DRAFT
  DELETED
}

enum MediaType {
  IMAGE
  VIDEO
}

enum CommentStatus {
  PUBLIC
  DELETED
}

enum TargetType {
  POST
  COMMENT
}

enum ActionType {
  DELETE
}
